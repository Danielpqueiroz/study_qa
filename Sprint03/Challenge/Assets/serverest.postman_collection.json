{
	"info": {
		"_postman_id": "9d5ee510-99f4-4a13-b067-063630acde9e",
		"name": "serverest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29483042"
	},
	"item": [
		{
			"name": "login",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('deve autenticar um usuário com credenciais válidas', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"    const { message, authorization } = pm.response.json()\r",
									"    pm.expect(message).to.equal(\"Login realizado com sucesso\")\r",
									"    pm.expect(authorization).to.have.length.greaterThan(0)\r",
									"    \r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response contém token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('authorization').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson = pm.response.json();\r",
									"\r",
									"// Recupera a senha do corpo da requisição enviada\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"var password = requestBody.password;\r",
									"\r",
									"// Valida que a senha possui entre 5 e 10 caracteres\r",
									"pm.test(\"A senha deve ter entre 5 e 10 caracteres\", function () {\r",
									"  pm.expect(password.length).to.be.at.least(5);\r",
									"  pm.expect(password.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"daniel.1718498226712@email.com\",\r\n    \"password\": \"3ckd2daN\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login com senha não cadastrada",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson = pm.response.json();\r",
									"\r",
									"// Recupera a senha do corpo da requisição enviada\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"var password = requestBody.password;\r",
									"\r",
									"// Valida que a senha possui entre 5 e 10 caracteres\r",
									"pm.test(\"A senha deve ter entre 5 e 10 caracteres\", function () {\r",
									"  pm.expect(password.length).to.be.at.least(5);\r",
									"  pm.expect(password.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"dpq123@gmaile.com\",\r\n    \"password\": \"2112123244\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login usuário não cadastrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson = pm.response.json();\r",
									"\r",
									"// Recupera a senha do corpo da requisição enviada\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"var password = requestBody.password;\r",
									"\r",
									"// Valida que a senha possui entre 5 e 10 caracteres\r",
									"pm.test(\"A senha deve ter entre 5 e 10 caracteres\", function () {\r",
									"  pm.expect(password.length).to.be.at.least(5);\r",
									"  pm.expect(password.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"fulanodasilv123@qa.com\",\r\n    \"password\": \"teste123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "usuarios",
			"item": [
				{
					"name": "cadastrar usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifique se o campo nome está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  \r",
									"  pm.expect(parsedData).to.have.property(\"nome\").that.is.a(\"string\").and.is.not.empty;\r",
									" \r",
									"});\r",
									"pm.test(\"Verifique se o campo email está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"email\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"pm.test(\"Verifique se o campo password está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"password\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"pm.test(\"Verifique se o campo administrador está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"administrador\").that.is.a(\"string\").and.is.not.empty;\r",
									"});\r",
									"\r",
									"// Test to check if the email uses a prohibited provider\r",
									"pm.test(\"O e-mail não deve usar provedores proibidos (Gmail ou Hotmail)\", function () {\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    var email = requestData.email;\r",
									"    var prohibitedProviders = [\"gmail.com\", \"hotmail.com\"];\r",
									"\r",
									"    var isProhibitedProvider = prohibitedProviders.some(function(provider) {\r",
									"        return email.includes(provider);\r",
									"    });\r",
									"\r",
									"    pm.expect(isProhibitedProvider).to.be.false;\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson = pm.response.json();\r",
									"\r",
									"// Recupera a senha do corpo da requisição enviada\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"var password = requestBody.password;\r",
									"\r",
									"// Valida que a senha possui entre 5 e 10 caracteres\r",
									"pm.test(\"A senha deve ter entre 5 e 10 caracteres\", function () {\r",
									"  pm.expect(password.length).to.be.at.least(5);\r",
									"  pm.expect(password.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson;\r",
									"try {\r",
									"    responseJson = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.error(\"Erro ao analisar a resposta JSON\", e);\r",
									"    pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
									"        pm.expect.fail(\"A resposta não é um JSON válido\");\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Test to check if the entered email is a valid email\r",
									"pm.test(\"Email é válido\", function () {\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    var email = requestData.email;\r",
									"    var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"\r",
									"    pm.expect(email).to.match(emailRegex, \"Email should be a valid email address\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var isAdmin = Math.random() < 0.5 ? 'true' : 'false';\r",
									"pm.environment.set(\"randomAdmin\", isAdmin);\r",
									"\r",
									"const email = `daniel.${new Date().getTime()}@email.com`;\r",
									"pm.collectionVariables.set('userEmail', email);\r",
									"\r",
									"function generateRandomPassword() {\r",
									"    var chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
									"    var passwordLength = Math.floor(Math.random() * (10 - 5 + 1)) + 5; // Gera um número aleatório entre 5 e 10\r",
									"    var password = \"\";\r",
									"    for (var i = 0; i < passwordLength; i++) {\r",
									"        var randomIndex = Math.floor(Math.random() * chars.length);\r",
									"        password += chars[randomIndex];\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"var randomPassword = generateRandomPassword();\r",
									"pm.environment.set(\"randomPassword\", randomPassword);\r",
									"console.log(\"Generated random password: \" + randomPassword);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"administrador\": \"{{randomAdmin}}\"\r\n}\r\n\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar com email invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Verifique se o campo nome está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  \r",
									"  pm.expect(parsedData).to.have.property(\"nome\").that.is.a(\"string\").and.is.not.empty;\r",
									" \r",
									"});\r",
									"pm.test(\"Verifique se o campo email está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"email\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"pm.test(\"Verifique se o campo password está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"password\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"pm.test(\"Verifique se o campo administrador está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"administrador\").that.is.a(\"string\").and.is.not.empty;\r",
									"});\r",
									"\r",
									"// Test to check if the email uses a prohibited provider\r",
									"pm.test(\"O e-mail não deve usar provedores proibidos (Gmail ou Hotmail)\", function () {\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    var email = requestData.email;\r",
									"    var prohibitedProviders = [\"gmail.com\", \"hotmail.com\"];\r",
									"\r",
									"    var isProhibitedProvider = prohibitedProviders.some(function(provider) {\r",
									"        return email.includes(provider);\r",
									"    });\r",
									"\r",
									"    pm.expect(isProhibitedProvider).to.be.false;\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson = pm.response.json();\r",
									"\r",
									"// Recupera a senha do corpo da requisição enviada\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"var password = requestBody.password;\r",
									"\r",
									"// Valida que a senha possui entre 5 e 10 caracteres\r",
									"pm.test(\"A senha deve ter entre 5 e 10 caracteres\", function () {\r",
									"  pm.expect(password.length).to.be.at.least(5);\r",
									"  pm.expect(password.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson;\r",
									"try {\r",
									"    responseJson = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.error(\"Erro ao analisar a resposta JSON\", e);\r",
									"    pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
									"        pm.expect.fail(\"A resposta não é um JSON válido\");\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var isAdmin = Math.random() < 0.5 ? 'true' : 'false';\r",
									"pm.environment.set(\"randomAdmin\", isAdmin);\r",
									"\r",
									"function generateInvalidEmail() {\r",
									"    var chars = \"abcdefghijklmnopqrstuvwxyz\";\r",
									"    var invalidEmail = \"\";\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        var randomIndex = Math.floor(Math.random() * chars.length);\r",
									"        invalidEmail += chars[randomIndex];\r",
									"    }\r",
									"    invalidEmail += \"@invalid\"; // Adiciona uma parte inválida ao e-mail\r",
									"    return invalidEmail;\r",
									"}\r",
									"\r",
									"var invalidEmail = generateInvalidEmail();\r",
									"pm.environment.set(\"invalidEmail\", invalidEmail);\r",
									"console.log(\"Generated invalid email: \" + invalidEmail);\r",
									"\r",
									"\r",
									"function generateRandomPassword() {\r",
									"    var chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
									"    var passwordLength = Math.floor(Math.random() * (10 - 5 + 1)) + 5; // Gera um número aleatório entre 5 e 10\r",
									"    var password = \"\";\r",
									"    for (var i = 0; i < passwordLength; i++) {\r",
									"        var randomIndex = Math.floor(Math.random() * chars.length);\r",
									"        password += chars[randomIndex];\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"var randomPassword = generateRandomPassword();\r",
									"pm.environment.set(\"randomPassword\", randomPassword);\r",
									"console.log(\"Generated random password: \" + randomPassword);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{invalidEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"administrador\": \"{{randomAdmin}}\"\r\n}\r\n\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar com email do gmail proibido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifique se o campo nome está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  \r",
									"  pm.expect(parsedData).to.have.property(\"nome\").that.is.a(\"string\").and.is.not.empty;\r",
									" \r",
									"});\r",
									"pm.test(\"Verifique se o campo email está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"email\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"pm.test(\"Verifique se o campo password está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"password\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"pm.test(\"Verifique se o campo administrador está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"administrador\").that.is.a(\"string\").and.is.not.empty;\r",
									"});\r",
									"\r",
									"// Test to check if the email uses a prohibited provider\r",
									"pm.test(\"O e-mail não deve usar provedores proibidos (Gmail ou Hotmail)\", function () {\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    var email = requestData.email;\r",
									"    var prohibitedProviders = [\"gmail.com\", \"hotmail.com\"];\r",
									"\r",
									"    var isProhibitedProvider = prohibitedProviders.some(function(provider) {\r",
									"        return email.includes(provider);\r",
									"    });\r",
									"\r",
									"    pm.expect(isProhibitedProvider).to.be.false;\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson = pm.response.json();\r",
									"\r",
									"// Recupera a senha do corpo da requisição enviada\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"var password = requestBody.password;\r",
									"\r",
									"// Valida que a senha possui entre 5 e 10 caracteres\r",
									"pm.test(\"A senha deve ter entre 5 e 10 caracteres\", function () {\r",
									"  pm.expect(password.length).to.be.at.least(5);\r",
									"  pm.expect(password.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson;\r",
									"try {\r",
									"    responseJson = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.error(\"Erro ao analisar a resposta JSON\", e);\r",
									"    pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
									"        pm.expect.fail(\"A resposta não é um JSON válido\");\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var isAdmin = Math.random() < 0.5 ? 'true' : 'false';\r",
									"pm.environment.set(\"randomAdmin\", isAdmin);\r",
									"\r",
									"function generateGmailEmail() {\r",
									"    var chars = \"abcdefghijklmnopqrstuvwxyz0123456789\";\r",
									"    var emailPrefix = \"\";\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        var randomIndex = Math.floor(Math.random() * chars.length);\r",
									"        emailPrefix += chars[randomIndex];\r",
									"    }\r",
									"    var gmailEmail = emailPrefix + \"@gmail.com\";\r",
									"    return gmailEmail;\r",
									"}\r",
									"\r",
									"var gmailEmail = generateGmailEmail();\r",
									"pm.environment.set(\"gmailEmail\", gmailEmail);\r",
									"console.log(\"Generated Gmail email: \" + gmailEmail);\r",
									"\r",
									"\r",
									"\r",
									"function generateRandomPassword() {\r",
									"    var chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
									"    var passwordLength = Math.floor(Math.random() * (10 - 5 + 1)) + 5; // Gera um número aleatório entre 5 e 10\r",
									"    var password = \"\";\r",
									"    for (var i = 0; i < passwordLength; i++) {\r",
									"        var randomIndex = Math.floor(Math.random() * chars.length);\r",
									"        password += chars[randomIndex];\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"var randomPassword = generateRandomPassword();\r",
									"pm.environment.set(\"randomPassword\", randomPassword);\r",
									"console.log(\"Generated random password: \" + randomPassword);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{gmailEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"administrador\": \"{{randomAdmin}}\"\r\n}\r\n\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar com email do hotmail proibido Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifique se o campo nome está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  \r",
									"  pm.expect(parsedData).to.have.property(\"nome\").that.is.a(\"string\").and.is.not.empty;\r",
									" \r",
									"});\r",
									"pm.test(\"Verifique se o campo email está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"email\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"pm.test(\"Verifique se o campo password está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"password\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"pm.test(\"Verifique se o campo administrador está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"administrador\").that.is.a(\"string\").and.is.not.empty;\r",
									"});\r",
									"\r",
									"// Test to check if the email uses a prohibited provider\r",
									"pm.test(\"O e-mail não deve usar provedores proibidos (Gmail ou Hotmail)\", function () {\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    var email = requestData.email;\r",
									"    var prohibitedProviders = [\"gmail.com\", \"hotmail.com\"];\r",
									"\r",
									"    var isProhibitedProvider = prohibitedProviders.some(function(provider) {\r",
									"        return email.includes(provider);\r",
									"    });\r",
									"\r",
									"    pm.expect(isProhibitedProvider).to.be.false;\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson = pm.response.json();\r",
									"\r",
									"// Recupera a senha do corpo da requisição enviada\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"var password = requestBody.password;\r",
									"\r",
									"// Valida que a senha possui entre 5 e 10 caracteres\r",
									"pm.test(\"A senha deve ter entre 5 e 10 caracteres\", function () {\r",
									"  pm.expect(password.length).to.be.at.least(5);\r",
									"  pm.expect(password.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson;\r",
									"try {\r",
									"    responseJson = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.error(\"Erro ao analisar a resposta JSON\", e);\r",
									"    pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
									"        pm.expect.fail(\"A resposta não é um JSON válido\");\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var isAdmin = Math.random() < 0.5 ? 'true' : 'false';\r",
									"pm.environment.set(\"randomAdmin\", isAdmin);\r",
									"\r",
									"function generateHotmailEmail() {\r",
									"    var chars = \"abcdefghijklmnopqrstuvwxyz0123456789\";\r",
									"    var emailPrefix = \"\";\r",
									"    for (var i = 0; i < 10; i++) {\r",
									"        var randomIndex = Math.floor(Math.random() * chars.length);\r",
									"        emailPrefix += chars[randomIndex];\r",
									"    }\r",
									"    var hotmailEmail = emailPrefix + \"@hotmail.com\";\r",
									"    return hotmailEmail;\r",
									"}\r",
									"\r",
									"var hotmailEmail = generateHotmailEmail();\r",
									"pm.environment.set(\"hotmailEmail\", hotmailEmail);\r",
									"console.log(\"Generated Hotmail email: \" + hotmailEmail);\r",
									"\r",
									"\r",
									"\r",
									"function generateRandomPassword() {\r",
									"    var chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
									"    var passwordLength = Math.floor(Math.random() * (10 - 5 + 1)) + 5; // Gera um número aleatório entre 5 e 10\r",
									"    var password = \"\";\r",
									"    for (var i = 0; i < passwordLength; i++) {\r",
									"        var randomIndex = Math.floor(Math.random() * chars.length);\r",
									"        password += chars[randomIndex];\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"var randomPassword = generateRandomPassword();\r",
									"pm.environment.set(\"randomPassword\", randomPassword);\r",
									"console.log(\"Generated random password: \" + randomPassword);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{hotmailEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"administrador\": \"{{randomAdmin}}\"\r\n}\r\n\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar usuário com senha menor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifique se o campo nome está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  \r",
									"  pm.expect(parsedData).to.have.property(\"nome\").that.is.a(\"string\").and.is.not.empty;\r",
									" \r",
									"});\r",
									"pm.test(\"Verifique se o campo email está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"email\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"pm.test(\"Verifique se o campo password está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"password\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"pm.test(\"Verifique se o campo administrador está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"administrador\").that.is.a(\"string\").and.is.not.empty;\r",
									"});\r",
									"\r",
									"// Test to check if the email uses a prohibited provider\r",
									"pm.test(\"O e-mail não deve usar provedores proibidos (Gmail ou Hotmail)\", function () {\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    var email = requestData.email;\r",
									"    var prohibitedProviders = [\"gmail.com\", \"hotmail.com\"];\r",
									"\r",
									"    var isProhibitedProvider = prohibitedProviders.some(function(provider) {\r",
									"        return email.includes(provider);\r",
									"    });\r",
									"\r",
									"    pm.expect(isProhibitedProvider).to.be.false;\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson = pm.response.json();\r",
									"\r",
									"// Recupera a senha do corpo da requisição enviada\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"var password = requestBody.password;\r",
									"\r",
									"// Valida que a senha possui entre 5 e 10 caracteres\r",
									"pm.test(\"A senha deve ter entre 5 e 10 caracteres\", function () {\r",
									"  pm.expect(password.length).to.be.at.least(5);\r",
									"  pm.expect(password.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson;\r",
									"try {\r",
									"    responseJson = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.error(\"Erro ao analisar a resposta JSON\", e);\r",
									"    pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
									"        pm.expect.fail(\"A resposta não é um JSON válido\");\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Test to check if the entered email is a valid email\r",
									"pm.test(\"Email é válido\", function () {\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    var email = requestData.email;\r",
									"    var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"\r",
									"    pm.expect(email).to.match(emailRegex, \"Email should be a valid email address\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var isAdmin = Math.random() < 0.5 ? 'true' : 'false';\r",
									"pm.environment.set(\"randomAdmin\", isAdmin);\r",
									"\r",
									"const email = `daniel.${new Date().getTime()}@email.com`;\r",
									"pm.collectionVariables.set('userEmail', email);\r",
									"\r",
									"function generateRandomShortPassword() {\r",
									"    var chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
									"    var passwordLength = Math.floor(Math.random() * 4) + 1; // Gera um número aleatório entre 1 e 4\r",
									"    var password = \"\";\r",
									"    for (var i = 0; i < passwordLength; i++) {\r",
									"        var randomIndex = Math.floor(Math.random() * chars.length);\r",
									"        password += chars[randomIndex];\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"var shortPassword = generateRandomShortPassword();\r",
									"pm.environment.set(\"shortPassword\", shortPassword);\r",
									"console.log(\"Generated short password: \" + shortPassword);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{shortPassword}}\",\r\n    \"administrador\": \"{{randomAdmin}}\"\r\n}\r\n\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar usuário com senha maior",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifique se o campo nome está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  \r",
									"  pm.expect(parsedData).to.have.property(\"nome\").that.is.a(\"string\").and.is.not.empty;\r",
									" \r",
									"});\r",
									"pm.test(\"Verifique se o campo email está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"email\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"pm.test(\"Verifique se o campo password está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"password\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"pm.test(\"Verifique se o campo administrador está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"administrador\").that.is.a(\"string\").and.is.not.empty;\r",
									"});\r",
									"\r",
									"// Test to check if the email uses a prohibited provider\r",
									"pm.test(\"O e-mail não deve usar provedores proibidos (Gmail ou Hotmail)\", function () {\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    var email = requestData.email;\r",
									"    var prohibitedProviders = [\"gmail.com\", \"hotmail.com\"];\r",
									"\r",
									"    var isProhibitedProvider = prohibitedProviders.some(function(provider) {\r",
									"        return email.includes(provider);\r",
									"    });\r",
									"\r",
									"    pm.expect(isProhibitedProvider).to.be.false;\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson = pm.response.json();\r",
									"\r",
									"// Recupera a senha do corpo da requisição enviada\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"var password = requestBody.password;\r",
									"\r",
									"// Valida que a senha possui entre 5 e 10 caracteres\r",
									"pm.test(\"A senha deve ter entre 5 e 10 caracteres\", function () {\r",
									"  pm.expect(password.length).to.be.at.least(5);\r",
									"  pm.expect(password.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson;\r",
									"try {\r",
									"    responseJson = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.error(\"Erro ao analisar a resposta JSON\", e);\r",
									"    pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
									"        pm.expect.fail(\"A resposta não é um JSON válido\");\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Test to check if the entered email is a valid email\r",
									"pm.test(\"Email é válido\", function () {\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    var email = requestData.email;\r",
									"    var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"\r",
									"    pm.expect(email).to.match(emailRegex, \"Email should be a valid email address\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var isAdmin = Math.random() < 0.5 ? 'true' : 'false';\r",
									"pm.environment.set(\"randomAdmin\", isAdmin);\r",
									"\r",
									"const email = `daniel.${new Date().getTime()}@email.com`;\r",
									"pm.collectionVariables.set('userEmail', email);\r",
									"\r",
									"function generateLongPassword() {\r",
									"    var chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
									"    var passwordLength = Math.floor(Math.random() * 10) + 11; // Gera um número aleatório entre 11 e 20\r",
									"    var password = \"\";\r",
									"    for (var i = 0; i < passwordLength; i++) {\r",
									"        var randomIndex = Math.floor(Math.random() * chars.length);\r",
									"        password += chars[randomIndex];\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"var longPassword = generateLongPassword();\r",
									"pm.environment.set(\"longPassword\", longPassword);\r",
									"console.log(\"Generated long password: \" + longPassword);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{longPassword}}\",\r\n    \"administrador\": \"{{randomAdmin}}\"\r\n}\r\n\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar usuário sem nome",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Verifique se o campo email está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"email\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"pm.test(\"Verifique se o campo password está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"password\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"pm.test(\"Verifique se o campo administrador está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"administrador\").that.is.a(\"string\").and.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson = pm.response.json();\r",
									"\r",
									"// Recupera a senha do corpo da requisição enviada\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"var password = requestBody.password;\r",
									"\r",
									"// Valida que a senha possui entre 5 e 10 caracteres\r",
									"pm.test(\"A senha deve ter entre 5 e 10 caracteres\", function () {\r",
									"  pm.expect(password.length).to.be.at.least(5);\r",
									"  pm.expect(password.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson;\r",
									"try {\r",
									"    responseJson = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.error(\"Erro ao analisar a resposta JSON\", e);\r",
									"    pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
									"        pm.expect.fail(\"A resposta não é um JSON válido\");\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Test to check if the entered email is a valid email\r",
									"pm.test(\"Email é válido\", function () {\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    var email = requestData.email;\r",
									"    var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"\r",
									"    pm.expect(email).to.match(emailRegex, \"Email should be a valid email address\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var isAdmin = Math.random() < 0.5 ? 'true' : 'false';\r",
									"pm.environment.set(\"randomAdmin\", isAdmin);\r",
									"\r",
									"const email = `daniel.${new Date().getTime()}@email.com`;\r",
									"pm.collectionVariables.set('userEmail', email);\r",
									"\r",
									"function generateRandomPassword() {\r",
									"    var chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
									"    var passwordLength = Math.floor(Math.random() * (10 - 5 + 1)) + 5; // Gera um número aleatório entre 5 e 10\r",
									"    var password = \"\";\r",
									"    for (var i = 0; i < passwordLength; i++) {\r",
									"        var randomIndex = Math.floor(Math.random() * chars.length);\r",
									"        password += chars[randomIndex];\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"var randomPassword = generateRandomPassword();\r",
									"pm.environment.set(\"randomPassword\", randomPassword);\r",
									"console.log(\"Generated random password: \" + randomPassword);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"administrador\": \"{{randomAdmin}}\"\r\n    \r\n}\r\n//{\r\n//  \"nome\": \"Existing User\",\r\n//  \"email\": \"exinguarr@example.com\",{{userEmail}}\r\n//  \"password\": \"password\",{{$randomString}}\r\n//  \"administrador\": \"false\"\r\n//}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar usuário sem email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifique se o campo nome está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  \r",
									"  pm.expect(parsedData).to.have.property(\"nome\").that.is.a(\"string\").and.is.not.empty;\r",
									" \r",
									"});\r",
									"\r",
									"pm.test(\"Verifique se o campo password está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"password\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"pm.test(\"Verifique se o campo administrador está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"administrador\").that.is.a(\"string\").and.is.not.empty;\r",
									"});\r",
									"\r",
									"// Test to check if the email uses a prohibited provider\r",
									"pm.test(\"O e-mail não deve usar provedores proibidos (Gmail ou Hotmail)\", function () {\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    var email = requestData.email;\r",
									"    var prohibitedProviders = [\"gmail.com\", \"hotmail.com\"];\r",
									"\r",
									"    var isProhibitedProvider = prohibitedProviders.some(function(provider) {\r",
									"        return email.includes(provider);\r",
									"    });\r",
									"\r",
									"    pm.expect(isProhibitedProvider).to.be.false;\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson = pm.response.json();\r",
									"\r",
									"// Recupera a senha do corpo da requisição enviada\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"var password = requestBody.password;\r",
									"\r",
									"// Valida que a senha possui entre 5 e 10 caracteres\r",
									"pm.test(\"A senha deve ter entre 5 e 10 caracteres\", function () {\r",
									"  pm.expect(password.length).to.be.at.least(5);\r",
									"  pm.expect(password.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson;\r",
									"try {\r",
									"    responseJson = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.error(\"Erro ao analisar a resposta JSON\", e);\r",
									"    pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
									"        pm.expect.fail(\"A resposta não é um JSON válido\");\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var isAdmin = Math.random() < 0.5 ? 'true' : 'false';\r",
									"pm.environment.set(\"randomAdmin\", isAdmin);\r",
									"\r",
									"const email = `daniel.${new Date().getTime()}@email.com`;\r",
									"pm.collectionVariables.set('userEmail', email);\r",
									"\r",
									"function generateRandomPassword() {\r",
									"    var chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
									"    var passwordLength = Math.floor(Math.random() * (10 - 5 + 1)) + 5; // Gera um número aleatório entre 5 e 10\r",
									"    var password = \"\";\r",
									"    for (var i = 0; i < passwordLength; i++) {\r",
									"        var randomIndex = Math.floor(Math.random() * chars.length);\r",
									"        password += chars[randomIndex];\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"var randomPassword = generateRandomPassword();\r",
									"pm.environment.set(\"randomPassword\", randomPassword);\r",
									"console.log(\"Generated random password: \" + randomPassword);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"email\": \"\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"administrador\": \"{{randomAdmin}}\"\r\n    \r\n}\r\n//{\r\n//  \"nome\": \"Existing User\",\r\n//  \"email\": \"exinguarr@example.com\",{{userEmail}}\r\n//  \"password\": \"password\",{{$randomString}}\r\n//  \"administrador\": \"false\"\r\n//}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar usuário sem password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifique se o campo nome está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  \r",
									"  pm.expect(parsedData).to.have.property(\"nome\").that.is.a(\"string\").and.is.not.empty;\r",
									" \r",
									"});\r",
									"pm.test(\"Verifique se o campo email está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"email\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"\r",
									"pm.test(\"Verifique se o campo administrador está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"administrador\").that.is.a(\"string\").and.is.not.empty;\r",
									"});\r",
									"\r",
									"// Test to check if the email uses a prohibited provider\r",
									"\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson;\r",
									"try {\r",
									"    responseJson = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.error(\"Erro ao analisar a resposta JSON\", e);\r",
									"    pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
									"        pm.expect.fail(\"A resposta não é um JSON válido\");\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Test to check if the entered email is a valid email\r",
									"pm.test(\"Email é válido\", function () {\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    var email = requestData.email;\r",
									"    var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"\r",
									"    pm.expect(email).to.match(emailRegex, \"Email should be a valid email address\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var isAdmin = Math.random() < 0.5 ? 'true' : 'false';\r",
									"pm.environment.set(\"randomAdmin\", isAdmin);\r",
									"\r",
									"const email = `daniel.${new Date().getTime()}@email.com`;\r",
									"pm.collectionVariables.set('userEmail', email);\r",
									"\r",
									"function generateRandomPassword() {\r",
									"    var chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
									"    var passwordLength = Math.floor(Math.random() * (10 - 5 + 1)) + 5; // Gera um número aleatório entre 5 e 10\r",
									"    var password = \"\";\r",
									"    for (var i = 0; i < passwordLength; i++) {\r",
									"        var randomIndex = Math.floor(Math.random() * chars.length);\r",
									"        password += chars[randomIndex];\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"var randomPassword = generateRandomPassword();\r",
									"pm.environment.set(\"randomPassword\", randomPassword);\r",
									"console.log(\"Generated random password: \" + randomPassword);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"\",\r\n    \"administrador\": \"{{randomAdmin}}\"\r\n    \r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "\nThe HTTP POST request to `/usuarios` endpoint is used to create a new user. The request body should contain the user's name, email, password, and an indication of whether the user is an administrator.\n\n### Request Body\n- `nome` (string): The name of the user.\n- `email` (string): The email address of the user.\n- `password` (string): The password for the user, which should be randomly generated with 5 to 10 characters.\n- `administrador` (string): Indicates whether the user is an administrator.\n\n### Response\nUpon successful creation of the user, the API returns a status code of 201 and a JSON response with a message and the unique identifier for the newly created user.\n\n### Pre-request Script\nTo generate a random password of 5 to 10 characters, a pre-request script should be added to the request.\n\n"
					},
					"response": []
				},
				{
					"name": "cadastrar usuário sem valor no administrador",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifique se o campo nome está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  \r",
									"  pm.expect(parsedData).to.have.property(\"nome\").that.is.a(\"string\").and.is.not.empty;\r",
									" \r",
									"});\r",
									"pm.test(\"Verifique se o campo email está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"email\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"pm.test(\"Verifique se o campo password está presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  pm.expect(parsedData).to.have.property(\"password\").that.is.a(\"string\").and.is.not.empty;\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson = pm.response.json();\r",
									"\r",
									"// Recupera a senha do corpo da requisição enviada\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"var password = requestBody.password;\r",
									"\r",
									"// Valida que a senha possui entre 5 e 10 caracteres\r",
									"pm.test(\"A senha deve ter entre 5 e 10 caracteres\", function () {\r",
									"  pm.expect(password.length).to.be.at.least(5);\r",
									"  pm.expect(password.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson;\r",
									"try {\r",
									"    responseJson = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.error(\"Erro ao analisar a resposta JSON\", e);\r",
									"    pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
									"        pm.expect.fail(\"A resposta não é um JSON válido\");\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Test to check if the entered email is a valid email\r",
									"pm.test(\"Email é válido\", function () {\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    var email = requestData.email;\r",
									"    var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"\r",
									"    pm.expect(email).to.match(emailRegex, \"Email should be a valid email address\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var isAdmin = Math.random() < 0.5 ? 'true' : 'false';\r",
									"pm.environment.set(\"randomAdmin\", isAdmin);\r",
									"\r",
									"function generateRandomPassword() {\r",
									"    var chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
									"    var passwordLength = Math.floor(Math.random() * (10 - 5 + 1)) + 5; // Gera um número aleatório entre 5 e 10\r",
									"    var password = \"\";\r",
									"    for (var i = 0; i < passwordLength; i++) {\r",
									"        var randomIndex = Math.floor(Math.random() * chars.length);\r",
									"        password += chars[randomIndex];\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"var randomPassword = generateRandomPassword();\r",
									"pm.environment.set(\"randomPassword\", randomPassword);\r",
									"console.log(\"Generated random password: \" + randomPassword);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"administrador\": \"\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "lista usuários",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contém lista de usuários\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('quantidade');\r",
									"    pm.expect(jsonData).to.have.property('usuarios').that.is.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Cada usuário na resposta possui os campos 'id', 'nome', 'email' e 'password' corretos e preenchidos\", function () {\r",
									"    pm.response.json().usuarios.forEach(function(user) {\r",
									"        pm.expect(user).to.have.property('_id').that.is.a('string').and.not.empty;\r",
									"        pm.expect(user).to.have.property('nome').that.is.a('string').and.not.empty;\r",
									"        pm.expect(user).to.have.property('email').that.is.a('string').and.not.empty;\r",
									"        pm.expect(user).to.have.property('password').that.is.a('string').and.not.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "buscar usuário pelo id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Certifique-se de que você tem um ID de produto válido configurado\r",
									"pm.environment.set(\"productId\", \"validProductId\"); // Substitua \"validProductId\" pelo ID real de um produto\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/usuarios/sikJ0WHnbYv8GIwK",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								"sikJ0WHnbYv8GIwK"
							]
						}
					},
					"response": []
				},
				{
					"name": "buscar usuário com id inexistente",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/usuarios/0uxuPY0cbmQhpE",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								"0uxuPY0cbmQhpE"
							]
						}
					},
					"response": []
				},
				{
					"name": "editar usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifique se todos os campos estão presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  \r",
									"  pm.expect(parsedData).to.have.property(\"nome\").that.is.a(\"string\").and.is.not.empty;\r",
									"  pm.expect(parsedData).to.have.property(\"email\").that.is.a(\"string\").and.is.not.empty;\r",
									"  pm.expect(parsedData).to.have.property(\"password\").that.is.a(\"string\").and.is.not.empty;\r",
									"  pm.expect(parsedData).to.have.property(\"administrador\").that.is.a(\"string\").and.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson = pm.response.json();\r",
									"\r",
									"// Recupera a senha do corpo da requisição enviada\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"var password = requestBody.password;\r",
									"\r",
									"// Valida que a senha possui entre 5 e 10 caracteres\r",
									"pm.test(\"A senha deve ter entre 5 e 10 caracteres\", function () {\r",
									"  pm.expect(password.length).to.be.at.least(5);\r",
									"  pm.expect(password.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson;\r",
									"try {\r",
									"    responseJson = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.error(\"Erro ao analisar a resposta JSON\", e);\r",
									"    pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
									"        pm.expect.fail(\"A resposta não é um JSON válido\");\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Test to check if the entered email is a valid email\r",
									"pm.test(\"Email é válido\", function () {\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    var email = requestData.email;\r",
									"    var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"\r",
									"    pm.expect(email).to.match(emailRegex, \"Email should be a valid email address\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImRhbmllbC4xNzE4MTMyMTQzNDYwQGVtYWlsLmNvbSIsInBhc3N3b3JkIjoiMjExMjEyMzIiLCJpYXQiOjE3MTgxMzk0MDMsImV4cCI6MTcxODE0MDAwM30.ZPKJ_mswrSlruTZt5FhtkqYVwnJFEGjLwbijG1fpuPQ",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"Fulano da Silva sauro sasa\",\r\n    \"email\": \"fulanodasil@gmail.com\",\r\n    \"password\": \"teste123\",\r\n    \"administrador\": \"true\"\r\n    \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios/0uxuPY0cbmQhpEz1",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								"0uxuPY0cbmQhpEz1"
							]
						}
					},
					"response": []
				},
				{
					"name": "editar usuário com id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifique se todos os campos estão presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  \r",
									"  pm.expect(parsedData).to.have.property(\"nome\").that.is.a(\"string\").and.is.not.empty;\r",
									"  pm.expect(parsedData).to.have.property(\"email\").that.is.a(\"string\").and.is.not.empty;\r",
									"  pm.expect(parsedData).to.have.property(\"password\").that.is.a(\"string\").and.is.not.empty;\r",
									"  pm.expect(parsedData).to.have.property(\"administrador\").that.is.a(\"string\").and.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson = pm.response.json();\r",
									"\r",
									"// Recupera a senha do corpo da requisição enviada\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"var password = requestBody.password;\r",
									"\r",
									"// Valida que a senha possui entre 5 e 10 caracteres\r",
									"pm.test(\"A senha deve ter entre 5 e 10 caracteres\", function () {\r",
									"  pm.expect(password.length).to.be.at.least(5);\r",
									"  pm.expect(password.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson;\r",
									"try {\r",
									"    responseJson = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.error(\"Erro ao analisar a resposta JSON\", e);\r",
									"    pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
									"        pm.expect.fail(\"A resposta não é um JSON válido\");\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Test to check if the entered email is a valid email\r",
									"pm.test(\"Email é válido\", function () {\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    var email = requestData.email;\r",
									"    var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"\r",
									"    pm.expect(email).to.match(emailRegex, \"Email should be a valid email address\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"teste123\",\r\n    \"administrador\": \"true\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios/0uxuPY0cbmQhpE",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								"0uxuPY0cbmQhpE"
							]
						}
					},
					"response": []
				},
				{
					"name": "editar usuário com email de provedor proibido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifique se todos os campos estão presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  \r",
									"  pm.expect(parsedData).to.have.property(\"nome\").that.is.a(\"string\").and.is.not.empty;\r",
									"  pm.expect(parsedData).to.have.property(\"email\").that.is.a(\"string\").and.is.not.empty;\r",
									"  pm.expect(parsedData).to.have.property(\"password\").that.is.a(\"string\").and.is.not.empty;\r",
									"  pm.expect(parsedData).to.have.property(\"administrador\").that.is.a(\"string\").and.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson = pm.response.json();\r",
									"\r",
									"// Recupera a senha do corpo da requisição enviada\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"var password = requestBody.password;\r",
									"\r",
									"// Valida que a senha possui entre 5 e 10 caracteres\r",
									"pm.test(\"A senha deve ter entre 5 e 10 caracteres\", function () {\r",
									"  pm.expect(password.length).to.be.at.least(5);\r",
									"  pm.expect(password.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson;\r",
									"try {\r",
									"    responseJson = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.error(\"Erro ao analisar a resposta JSON\", e);\r",
									"    pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
									"        pm.expect.fail(\"A resposta não é um JSON válido\");\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Test to check if the entered email is a valid email\r",
									"pm.test(\"Email é válido\", function () {\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    var email = requestData.email;\r",
									"    var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"\r",
									"    pm.expect(email).to.match(emailRegex, \"Email should be a valid email address\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"email\": \"fulanoDaSilva@gmail.com\",\r\n    \"password\": \"teste123\",\r\n    \"administrador\": \"true\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios/0uxuPY0cbmQhpEz1",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								"0uxuPY0cbmQhpEz1"
							]
						}
					},
					"response": []
				},
				{
					"name": "editar usuário com email invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifique se todos os campos estão presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  \r",
									"  pm.expect(parsedData).to.have.property(\"nome\").that.is.a(\"string\").and.is.not.empty;\r",
									"  pm.expect(parsedData).to.have.property(\"email\").that.is.a(\"string\").and.is.not.empty;\r",
									"  pm.expect(parsedData).to.have.property(\"password\").that.is.a(\"string\").and.is.not.empty;\r",
									"  pm.expect(parsedData).to.have.property(\"administrador\").that.is.a(\"string\").and.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson = pm.response.json();\r",
									"\r",
									"// Recupera a senha do corpo da requisição enviada\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"var password = requestBody.password;\r",
									"\r",
									"// Valida que a senha possui entre 5 e 10 caracteres\r",
									"pm.test(\"A senha deve ter entre 5 e 10 caracteres\", function () {\r",
									"  pm.expect(password.length).to.be.at.least(5);\r",
									"  pm.expect(password.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson;\r",
									"try {\r",
									"    responseJson = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.error(\"Erro ao analisar a resposta JSON\", e);\r",
									"    pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
									"        pm.expect.fail(\"A resposta não é um JSON válido\");\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"email\": \"fulanoDaSilvagmail.com\",\r\n    \"password\": \"teste123\",\r\n    \"administrador\": \"true\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios/0uxuPY0cbmQhpEz1",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								"0uxuPY0cbmQhpEz1"
							]
						}
					},
					"response": []
				},
				{
					"name": "editar usuário com email já utilizado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifique se todos os campos estão presentes na solicitação\", function () {\r",
									"  var requestData = pm.request.body.raw;\r",
									"  var parsedData = JSON.parse(requestData);\r",
									"  \r",
									"  pm.expect(parsedData).to.have.property(\"nome\").that.is.a(\"string\").and.is.not.empty;\r",
									"  pm.expect(parsedData).to.have.property(\"email\").that.is.a(\"string\").and.is.not.empty;\r",
									"  pm.expect(parsedData).to.have.property(\"password\").that.is.a(\"string\").and.is.not.empty;\r",
									"  pm.expect(parsedData).to.have.property(\"administrador\").that.is.a(\"string\").and.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson = pm.response.json();\r",
									"\r",
									"// Recupera a senha do corpo da requisição enviada\r",
									"var requestBody = JSON.parse(pm.request.body.raw);\r",
									"var password = requestBody.password;\r",
									"\r",
									"// Valida que a senha possui entre 5 e 10 caracteres\r",
									"pm.test(\"A senha deve ter entre 5 e 10 caracteres\", function () {\r",
									"  pm.expect(password.length).to.be.at.least(5);\r",
									"  pm.expect(password.length).to.be.at.most(10);\r",
									"});\r",
									"\r",
									"// Recupera a resposta do corpo da requisição\r",
									"var responseJson;\r",
									"try {\r",
									"    responseJson = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.error(\"Erro ao analisar a resposta JSON\", e);\r",
									"    pm.test(\"A resposta deve ser um JSON válido\", function () {\r",
									"        pm.expect.fail(\"A resposta não é um JSON válido\");\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Test to check if the entered email is a valid email\r",
									"pm.test(\"Email é válido\", function () {\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    var email = requestData.email;\r",
									"    var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"\r",
									"    pm.expect(email).to.match(emailRegex, \"Email should be a valid email address\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"email\": \"fulanoDaSilva@gmail.com\",\r\n    \"password\": \"teste123\",\r\n    \"administrador\": \"true\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios/0uxuPY0cbmQhpEz",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								"0uxuPY0cbmQhpEz"
							]
						}
					},
					"response": []
				},
				{
					"name": "excluir usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Nenhum registro excluído\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios/3AmIHkChLjxMDNYl",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								"3AmIHkChLjxMDNYl"
							]
						}
					},
					"response": []
				},
				{
					"name": "excluir usuário com id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Nenhum registro excluído\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios/1U860KZyUrGqrIzH",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								"1U860KZyUrGqrIzH"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "produtos",
			"item": [
				{
					"name": "cadastrar produto com nome inválido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									" \r",
									"const postRequest = {\r",
									"    url: pm.environment.get(\"host\") + \"/login\",\r",
									"    method: \"POST\",\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        options: {\r",
									"            raw: {\r",
									"                language: \"json\"\r",
									"            }\r",
									"        },\r",
									"        raw: JSON.stringify({\r",
									"            email: \"Coleman.Renner@yahoo.com\",\r",
									"            password: \"fKPseV0sfiXqmOUz\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, function (err, res) {\r",
									"    let responseJson = res.json()\r",
									"    let auth = responseJson[\"authorization\"].split(\" \")\r",
									"    console.log(auth[1])\r",
									"    pm.globals.set(\"token\", auth[1])\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Field nome is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    ",
									"    // Verificar se o campo 'nome' está presente, não está vazio e é uma string",
									"    pm.expect(requestBody).to.have.property('nome').that.is.a('string').and.is.not.empty;",
									"",
									"});",
									"",
									"pm.test(\"Field preco is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    ",
									"    // Verificar se o campo 'preco' está presente, não está vazio e é um número",
									"    pm.expect(requestBody).to.have.property('preco').that.is.a('number').and.is.not.null;",
									" ",
									"});",
									"pm.test(\"Field descricao is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    // Verificar se o campo 'descricao' está presente, não está vazio e é uma string",
									"    pm.expect(requestBody).to.have.property('descricao').that.is.a('string').and.is.not.empty;",
									"",
									"});",
									"pm.test(\"Field quantidade is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"   // Verificar se o campo 'quantidade' está presente, não está vazio e é um número",
									"    pm.expect(requestBody).to.have.property('quantidade').that.is.a('number').and.is.not.null;",
									"});",
									"",
									"",
									"",
									"let resJson = pm.response.json()",
									"",
									"if(pm.response.code = 201) {",
									"    pm.environment.set(\"newProductId\", resJson._id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"@#$%ProdutoInvalido@@\",\r\n    \"preco\": {{$randomInt}},\r\n    \"descricao\": \"{{$randomFullName}}\",\r\n    \"quantidade\": {{$randomInt}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar produto sem nome",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									" \r",
									"const postRequest = {\r",
									"    url: pm.environment.get(\"host\") + \"/login\",\r",
									"    method: \"POST\",\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        options: {\r",
									"            raw: {\r",
									"                language: \"json\"\r",
									"            }\r",
									"        },\r",
									"        raw: JSON.stringify({\r",
									"            email: \"Coleman.Renner@yahoo.com\",\r",
									"            password: \"fKPseV0sfiXqmOUz\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, function (err, res) {\r",
									"    let responseJson = res.json()\r",
									"    let auth = responseJson[\"authorization\"].split(\" \")\r",
									"    console.log(auth[1])\r",
									"    pm.globals.set(\"token\", auth[1])\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Field nome is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    ",
									"    // Verificar se o campo 'nome' está presente, não está vazio e é uma string",
									"    pm.expect(requestBody).to.have.property('nome').that.is.empty;",
									"",
									"});",
									"pm.test(\"Field preco is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    ",
									"    // Verificar se o campo 'preco' está presente, não está vazio e é um número",
									"    pm.expect(requestBody).to.have.property('preco').that.is.a('number').and.is.not.null;",
									" ",
									"});",
									"pm.test(\"Field descricao is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    // Verificar se o campo 'descricao' está presente, não está vazio e é uma string",
									"    pm.expect(requestBody).to.have.property('descricao').that.is.a('string').and.is.not.empty;",
									"",
									"});",
									"pm.test(\"Field quantidade is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"   // Verificar se o campo 'quantidade' está presente, não está vazio e é um número",
									"    pm.expect(requestBody).to.have.property('quantidade').that.is.a('number').and.is.not.null;",
									"});",
									"",
									"",
									"",
									"let resJson = pm.response.json()",
									"",
									"if(pm.response.code = 201) {",
									"    pm.environment.set(\"newProductId\", resJson._id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"\",\r\n    \"preco\": {{$randomInt}},\r\n    \"descricao\": \"{{$randomFullName}}\",\r\n    \"quantidade\": {{$randomInt}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar produto sem preço",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									" \r",
									"const postRequest = {\r",
									"    url: pm.environment.get(\"host\") + \"/login\",\r",
									"    method: \"POST\",\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        options: {\r",
									"            raw: {\r",
									"                language: \"json\"\r",
									"            }\r",
									"        },\r",
									"        raw: JSON.stringify({\r",
									"            email: \"Coleman.Renner@yahoo.com\",\r",
									"            password: \"fKPseV0sfiXqmOUz\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, function (err, res) {\r",
									"    let responseJson = res.json()\r",
									"    let auth = responseJson[\"authorization\"].split(\" \")\r",
									"    console.log(auth[1])\r",
									"    pm.globals.set(\"token\", auth[1])\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Field nome is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    ",
									"    // Verificar se o campo 'nome' está presente, não está vazio e é uma string",
									"    pm.expect(requestBody).to.have.property('nome').that.is.a('string').and.is.not.empty;",
									"",
									"});",
									"",
									"pm.test(\"Field preco is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    ",
									"    // Verificar se o campo 'preco' está presente, não está vazio e é um número",
									"    pm.expect(requestBody).to.have.property('preco').that.is.empty;",
									" ",
									"});",
									"pm.test(\"Field descricao is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    // Verificar se o campo 'descricao' está presente, não está vazio e é uma string",
									"    pm.expect(requestBody).to.have.property('descricao').that.is.a('string').and.is.not.empty;",
									"",
									"});",
									"pm.test(\"Field quantidade is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"   // Verificar se o campo 'quantidade' está presente, não está vazio e é um número",
									"    pm.expect(requestBody).to.have.property('quantidade').that.is.a('number').and.is.not.null;",
									"});",
									"",
									"",
									"",
									"let resJson = pm.response.json()",
									"",
									"if(pm.response.code = 201) {",
									"    pm.environment.set(\"newProductId\", resJson._id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFirstName}}\",\r\n    \"preco\": \"\",\r\n    \"descricao\": \"{{$randomFullName}}\",\r\n    \"quantidade\": {{$randomInt}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar produto sem descrição",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									" \r",
									"const postRequest = {\r",
									"    url: pm.environment.get(\"host\") + \"/login\",\r",
									"    method: \"POST\",\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        options: {\r",
									"            raw: {\r",
									"                language: \"json\"\r",
									"            }\r",
									"        },\r",
									"        raw: JSON.stringify({\r",
									"            email: \"Coleman.Renner@yahoo.com\",\r",
									"            password: \"fKPseV0sfiXqmOUz\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, function (err, res) {\r",
									"    let responseJson = res.json()\r",
									"    let auth = responseJson[\"authorization\"].split(\" \")\r",
									"    console.log(auth[1])\r",
									"    pm.globals.set(\"token\", auth[1])\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Field nome is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    ",
									"    // Verificar se o campo 'nome' está presente, não está vazio e é uma string",
									"    pm.expect(requestBody).to.have.property('nome').that.is.a('string').and.is.not.empty;",
									"",
									"});",
									"",
									"pm.test(\"Field preco is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    ",
									"    // Verificar se o campo 'preco' está presente, não está vazio e é um número",
									"    pm.expect(requestBody).to.have.property('preco').that.is.a('number').and.is.not.null;",
									" ",
									"});",
									"pm.test(\"Field descricao is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    // Verificar se o campo 'descricao' está presente, não está vazio e é uma string",
									"    pm.expect(requestBody).to.have.property('descricao').that.is.empty;",
									"",
									"});",
									"pm.test(\"Field quantidade is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"   // Verificar se o campo 'quantidade' está presente, não está vazio e é um número",
									"    pm.expect(requestBody).to.have.property('quantidade').that.is.a('number').and.is.not.null;",
									"});",
									"",
									"",
									"",
									"",
									"let resJson = pm.response.json()",
									"",
									"if(pm.response.code = 201) {",
									"    pm.environment.set(\"newProductId\", resJson._id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFirstName}}\",\r\n    \"preco\": {{$randomInt}},\r\n    \"descricao\": \"\",\r\n    \"quantidade\": {{$randomInt}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar produto sem quantidade",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									" \r",
									"const postRequest = {\r",
									"    url: pm.environment.get(\"host\") + \"/login\",\r",
									"    method: \"POST\",\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        options: {\r",
									"            raw: {\r",
									"                language: \"json\"\r",
									"            }\r",
									"        },\r",
									"        raw: JSON.stringify({\r",
									"            email: \"Coleman.Renner@yahoo.com\",\r",
									"            password: \"fKPseV0sfiXqmOUz\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, function (err, res) {\r",
									"    let responseJson = res.json()\r",
									"    let auth = responseJson[\"authorization\"].split(\" \")\r",
									"    console.log(auth[1])\r",
									"    pm.globals.set(\"token\", auth[1])\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Field nome is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    ",
									"    // Verificar se o campo 'nome' está presente, não está vazio e é uma string",
									"    pm.expect(requestBody).to.have.property('nome').that.is.a('string').and.is.not.empty;",
									"",
									"});",
									"",
									"pm.test(\"Field preco is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    ",
									"    // Verificar se o campo 'preco' está presente, não está vazio e é um número",
									"    pm.expect(requestBody).to.have.property('preco').that.is.a('number').and.is.not.null;",
									" ",
									"});",
									"pm.test(\"Field descricao is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    // Verificar se o campo 'descricao' está presente, não está vazio e é uma string",
									"    pm.expect(requestBody).to.have.property('descricao').that.is.a('string').and.is.not.empty;",
									"",
									"});",
									"pm.test(\"Field quantidade is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"   // Verificar se o campo 'quantidade' está presente, não está vazio e é um número",
									"    pm.expect(requestBody).to.have.property('quantidade').that.is.empty;",
									"});",
									"",
									"",
									"",
									"let resJson = pm.response.json()",
									"",
									"if(pm.response.code = 201) {",
									"    pm.environment.set(\"newProductId\", resJson._id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFirstName}}\",\r\n    \"preco\": {{$randomInt}},\r\n    \"descricao\": \"{{$randomFullName}}\",\r\n    \"quantidade\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar produto sem token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									" \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"let resJson = pm.response.json();",
									"// Verificar se a mensagem de erro está correta",
									"pm.test(\"Error message is correct\", function () {",
									"    pm.expect(resJson.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFirstName}}\",\r\n    \"preco\": \"{{$randomInt}}\",\r\n    \"descricao\": \"{{$randomFullName}}\",\r\n    \"quantidade\": \"{{$randomInt}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "cadastrar produto",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"const postRequest = {\r",
									"    url: pm.environment.get(\"host\") + \"/login\",\r",
									"    method: \"POST\",\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        options: {\r",
									"            raw: {\r",
									"                language: \"json\"\r",
									"            }\r",
									"        },\r",
									"        raw: JSON.stringify({\r",
									"            email: \"Coleman.Renner@yahoo.com\",\r",
									"            password: \"fKPseV0sfiXqmOUz\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, function (err, res) {\r",
									"    let responseJson = res.json()\r",
									"    let auth = responseJson[\"authorization\"].split(\" \")\r",
									"    console.log(auth[1])\r",
									"    pm.globals.set(\"token\", auth[1])\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Field nome is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    ",
									"    // Verificar se o campo 'nome' está presente, não está vazio e é uma string",
									"    pm.expect(requestBody).to.have.property('nome').that.is.a('string').and.is.not.empty;",
									"",
									"});",
									"",
									"pm.test(\"Field preco is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    ",
									"    // Verificar se o campo 'preco' está presente, não está vazio e é um número",
									"    pm.expect(requestBody).to.have.property('preco').that.is.a('number').and.is.not.null;",
									" ",
									"});",
									"pm.test(\"Field descricao is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"    // Verificar se o campo 'descricao' está presente, não está vazio e é uma string",
									"    pm.expect(requestBody).to.have.property('descricao').that.is.a('string').and.is.not.empty;",
									"",
									"});",
									"pm.test(\"Field quantidade is not empty and is in the correct format.\", function () {",
									"    var requestBody = pm.request.body.raw;",
									"    requestBody = JSON.parse(requestBody);",
									"   // Verificar se o campo 'quantidade' está presente, não está vazio e é um número",
									"    pm.expect(requestBody).to.have.property('quantidade').that.is.a('number').and.is.not.null;",
									"});",
									"// Test to verify if a product is already registered",
									"pm.test(\"O produto não estáva cadastrado\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('_id').that.is.not.empty;",
									"});",
									"",
									"",
									"let resJson = pm.response.json()",
									"",
									"if(pm.response.code = 201) {",
									"    pm.environment.set(\"newProductId\", resJson._id);",
									"    ",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"preco\": {{$randomInt}},\r\n    \"descricao\": \"{{$randomFullName}}\",\r\n    \"quantidade\": {{$randomInt}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "listar produtos",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Listar todos os produtos\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('quantidade');\r",
									"    pm.expect(jsonData).to.have.property('produtos');\r",
									"    pm.expect(jsonData.produtos).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/produtos",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "listar produtos sem autenticação",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    pm.expect(resJson.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/produtos",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "buscar produto pelo id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Certifique-se de que você tem um ID de produto válido configurado\r",
									"pm.environment.set(\"productId\", \"BeeJh5lz3k6kSIzA\"); // Substitua \"validProductId\" pelo ID real de um produto\r",
									"// Definindo um ID de produto inválido\r",
									"pm.environment.set(\"invalidProductId\", \"invalidoId12345\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Acessar um produto específico pelo ID\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('_id', pm.environment.get(\"newProductId\"));\r",
									"    pm.expect(jsonData).to.have.property('nome');\r",
									"    pm.expect(jsonData).to.have.property('preco');\r",
									"    pm.expect(jsonData).to.have.property('descricao');\r",
									"    pm.expect(jsonData).to.have.property('quantidade');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let resJson = pm.response.json()\r",
									"\r",
									"if(pm.response.code = 200) {\r",
									"   \r",
									"    pm.environment.set(\"sameName\", resJson.nome);\r",
									"    console.log(resJson.nome)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/produtos/{{newProductId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"{{newProductId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "buscar produto pelo id inexistente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Certifique-se de que você tem um ID de produto válido configurado\r",
									"pm.environment.set(\"productId\", \"BeeJh5lz3k6kSIzA\"); // Substitua \"validProductId\" pelo ID real de um produto\r",
									"// Definindo um ID de produto inválido\r",
									"pm.environment.set(\"invalidProductId\", \"invalidoId12345\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Acessar um produto com um ID inexistente\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message', 'Produto não encontrado');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/produtos/E5ud0uU0Tt62or",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"E5ud0uU0Tt62or"
							]
						}
					},
					"response": []
				},
				{
					"name": "editar produto",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									" \r",
									"const postRequest = {\r",
									"    url: pm.environment.get(\"host\") + \"/login\",\r",
									"    method: \"POST\",\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        options: {\r",
									"            raw: {\r",
									"                language: \"json\"\r",
									"            }\r",
									"        },\r",
									"        raw: JSON.stringify({\r",
									"            email: \"Coleman.Renner@yahoo.com\",\r",
									"            password: \"fKPseV0sfiXqmOUz\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, function (err, res) {\r",
									"    let responseJson = res.json()\r",
									"    let auth = responseJson[\"authorization\"].split(\" \")\r",
									"    console.log(auth[1])\r",
									"    pm.globals.set(\"token\", auth[1])\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Atualizar um produto existente com dados válidos\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Field nome is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    \r",
									"    // Verificar se o campo 'nome' está presente, não está vazio e é uma string\r",
									"    pm.expect(requestBody).to.have.property('nome').that.is.a('string').and.is.not.empty;\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Field preco is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    \r",
									"    // Verificar se o campo 'preco' está presente, não está vazio e é um número\r",
									"    pm.expect(requestBody).to.have.property('preco').that.is.a('number').and.is.not.null;\r",
									" \r",
									"});\r",
									"pm.test(\"Field descricao is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    // Verificar se o campo 'descricao' está presente, não está vazio e é uma string\r",
									"    pm.expect(requestBody).to.have.property('descricao').that.is.a('string').and.is.not.empty;\r",
									"\r",
									"});\r",
									"pm.test(\"Field quantidade is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"   // Verificar se o campo 'quantidade' está presente, não está vazio e é um número\r",
									"    pm.expect(requestBody).to.have.property('quantidade').that.is.a('number').and.is.not.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFirstName}}\",\r\n    \"preco\": {{$randomInt}},\r\n    \"descricao\": \"{{$randomFullName}}\",\r\n    \"quantidade\": {{$randomInt}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos/{{newProductId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"{{newProductId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "editar produto com nome já utilizado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera um ID aleatório alto que provavelmente não existe\r",
									"var nonexistentId = Math.floor(Math.random() * 1000000) + 9000000;\r",
									" // Define a variável de ambiente 'nonexistentId'\r",
									"pm.environment.set(\"nonexistentId\", nonexistentId);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"const postRequest = {\r",
									"    url: pm.environment.get(\"host\") + \"/login\",\r",
									"    method: \"POST\",\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        options: {\r",
									"            raw: {\r",
									"                language: \"json\"\r",
									"            }\r",
									"        },\r",
									"        raw: JSON.stringify({\r",
									"            email: \"Coleman.Renner@yahoo.com\",\r",
									"            password: \"fKPseV0sfiXqmOUz\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, function (err, res) {\r",
									"    let responseJson = res.json()\r",
									"    let auth = responseJson[\"authorization\"].split(\" \")\r",
									"    console.log(auth[1])\r",
									"    pm.globals.set(\"token\", auth[1])\r",
									"})\r",
									"\r",
									"const postRequest2 = {\r",
									"    url: pm.environment.get(\"host\") + \"/produtos\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'Bearer ' + pm.globals.get(\"token\")\r",
									"        \r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        options: {\r",
									"            raw: {\r",
									"                language: \"json\"\r",
									"            }\r",
									"        },\r",
									"        raw: JSON.stringify({\r",
									"            \r",
									"            nome: \"Mouse Logitec\",\r",
									"            preco: 50,\r",
									"            descricao: \"Mouse profissional\",\r",
									"            quantidade: 1\r",
									"            \r",
									"        })\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(postRequest2, function (err, res) {\r",
									"    let responseJson = res.json()\r",
									"    let idName = responseJson[\"_id\"]\r",
									"    console.log(idName)\r",
									"    \r",
									"    pm.globals.set(\"idSameName\", idName)\r",
									"    \r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Field nome is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    \r",
									"    // Verificar se o campo 'nome' está presente, não está vazio e é uma string\r",
									"    pm.expect(requestBody).to.have.property('nome').that.is.a('string').and.is.not.empty;\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Field preco is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    \r",
									"    // Verificar se o campo 'preco' está presente, não está vazio e é um número\r",
									"    pm.expect(requestBody).to.have.property('preco').that.is.a('number').and.is.not.null;\r",
									" \r",
									"});\r",
									"pm.test(\"Field descricao is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    // Verificar se o campo 'descricao' está presente, não está vazio e é uma string\r",
									"    pm.expect(requestBody).to.have.property('descricao').that.is.a('string').and.is.not.empty;\r",
									"\r",
									"});\r",
									"pm.test(\"Field quantidade is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"   // Verificar se o campo 'quantidade' está presente, não está vazio e é um número\r",
									"    pm.expect(requestBody).to.have.property('quantidade').that.is.a('number').and.is.not.null;\r",
									"});\r",
									"\r",
									"// Requisição para excluir o produto utilizando o ID armazenado na variável global\r",
									"const deleteRequest = {\r",
									"    url: pm.environment.get(\"host\") + \"/produtos/\" + pm.globals.get(\"idSameName\"),\r",
									"    method: \"DELETE\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'Bearer ' + pm.globals.get(\"token\")\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(deleteRequest, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(err);\r",
									"    } else {\r",
									"        console.log(\"Produto excluído com sucesso!\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"Mouse Logitec\",\r\n    \"preco\": 50,\r\n    \"descricao\": \"Mouse profissional\",\r\n    \"quantidade\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos/{{idSameName}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"{{idSameName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "editar produto com nome já existente criado via PUT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera um ID aleatório alto que provavelmente não existe\r",
									"var nonexistentId = Math.floor(Math.random() * 1000000) + 9000000;\r",
									" // Define a variável de ambiente 'nonexistentId'\r",
									"pm.environment.set(\"nonexistentId\", nonexistentId);\r",
									"\r",
									"\r",
									"\r",
									"const postRequest = {\r",
									"    url: pm.environment.get(\"host\") + \"/produtos\",\r",
									"    method: \"PUT\",\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        options: {\r",
									"            raw: {\r",
									"                language: \"json\"\r",
									"            }\r",
									"        },\r",
									"        raw: JSON.stringify({\r",
									"            \r",
									"            nome: \"{{$randomFirstName}}\",\r",
									"            preco: \"{{$randomInt}}\",\r",
									"            descricao: \"{{$randomFullName}}\",\r",
									"            quantidade: \"{{$randomInt}}\"\r",
									"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"// const postRequest = {\r",
									"//     url: pm.environment.get(\"host\") + \"/login\",\r",
									"//     method: \"POST\",\r",
									"//     body: {\r",
									"//         mode: \"raw\", \r",
									"//         options: {\r",
									"//             raw: {\r",
									"//                 language: \"json\"\r",
									"//             }\r",
									"//         },\r",
									"//         raw: JSON.stringify({\r",
									"//             email: \"Coleman.Renner@yahoo.com\",\r",
									"//             password: \"fKPseV0sfiXqmOUz\"\r",
									"//         })\r",
									"//     }\r",
									"// }\r",
									"\r",
									"// pm.sendRequest(postRequest, function (err, res) {\r",
									"//     let responseJson = res.json()\r",
									"//     let auth = responseJson[\"authorization\"].split(\" \")\r",
									"//     console.log(auth[1])\r",
									"//     pm.globals.set(\"token\", auth[1])\r",
									"// })\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Atualizar um produto com um nome já utilizado por outro produto\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");\r",
									"});\r",
									"\r",
									"pm.test(\"O campo nome não estão vazios e está no formato correto\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    \r",
									"    // Verificar se o campo 'nome' está presente, não está vazio e é uma string\r",
									"    pm.expect(requestBody).to.have.property('nome').that.is.a('string').and.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Field nome is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    \r",
									"    // Verificar se o campo 'nome' está presente, não está vazio e é uma string\r",
									"    pm.expect(requestBody).to.have.property('nome').that.is.a('string').and.is.not.empty;\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Field preco is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    \r",
									"    // Verificar se o campo 'preco' está presente, não está vazio e é um número\r",
									"    pm.expect(requestBody).to.have.property('preco').that.is.a('number').and.is.not.null;\r",
									" \r",
									"});\r",
									"pm.test(\"Field descricao is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    // Verificar se o campo 'descricao' está presente, não está vazio e é uma string\r",
									"    pm.expect(requestBody).to.have.property('descricao').that.is.a('string').and.is.not.empty;\r",
									"\r",
									"});\r",
									"pm.test(\"Field quantidade is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"   // Verificar se o campo 'quantidade' está presente, não está vazio e é um número\r",
									"    pm.expect(requestBody).to.have.property('quantidade').that.is.a('number').and.is.not.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"Notebook samsung vcore\",\r\n    \"preco\": {{$randomInt}},\r\n    \"descricao\": \"{{$randomFullName}}\",\r\n    \"quantidade\": {{$randomInt}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos/{{nonexistentId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"{{nonexistentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "editar produto com nome inválido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									" \r",
									"const postRequest = {\r",
									"    url: pm.environment.get(\"host\") + \"/login\",\r",
									"    method: \"POST\",\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        options: {\r",
									"            raw: {\r",
									"                language: \"json\"\r",
									"            }\r",
									"        },\r",
									"        raw: JSON.stringify({\r",
									"            email: \"Coleman.Renner@yahoo.com\",\r",
									"            password: \"fKPseV0sfiXqmOUz\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, function (err, res) {\r",
									"    let responseJson = res.json()\r",
									"    let auth = responseJson[\"authorization\"].split(\" \")\r",
									"    console.log(auth[1])\r",
									"    pm.globals.set(\"token\", auth[1])\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o código de resposta é 400 Bad Request (ou outro código esperado)\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Extrair o JSON da resposta\r",
									"let resJson = pm.response.json();\r",
									"\r",
									"// Verificar se a mensagem de erro está presente e correta\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(resJson.message).to.eql(\"Já existe produto com esse nome\");\r",
									"});\r",
									"\r",
									"pm.test(\"O campo nome não estão vazios e está no formato correto\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    \r",
									"    // Verificar se o campo 'nome' está presente, não está vazio e é uma string\r",
									"    pm.expect(requestBody).to.have.property('nome').that.is.a('string').and.is.not.empty;\r",
									"});\r",
									"pm.test(\"Field nome is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    \r",
									"    // Verificar se o campo 'nome' está presente, não está vazio e é uma string\r",
									"    pm.expect(requestBody).to.have.property('nome').that.is.a('string').and.is.not.empty;\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Field preco is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    \r",
									"    // Verificar se o campo 'preco' está presente, não está vazio e é um número\r",
									"    pm.expect(requestBody).to.have.property('preco').that.is.a('number').and.is.not.null;\r",
									" \r",
									"});\r",
									"pm.test(\"Field descricao is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    // Verificar se o campo 'descricao' está presente, não está vazio e é uma string\r",
									"    pm.expect(requestBody).to.have.property('descricao').that.is.a('string').and.is.not.empty;\r",
									"\r",
									"});\r",
									"pm.test(\"Field quantidade is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"   // Verificar se o campo 'quantidade' está presente, não está vazio e é um número\r",
									"    pm.expect(requestBody).to.have.property('quantidade').that.is.a('number').and.is.not.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"Notebook @@@@@@@###\",\r\n    \"preco\": {{$randomInt}},\r\n    \"descricao\": \"{{$randomFullName}}\",\r\n    \"quantidade\": {{$randomInt}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos/{{newProductId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"{{newProductId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "editar produto com id inexistente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera um ID aleatório alto que provavelmente não existe\r",
									"var nonexistentId = Math.floor(Math.random() * 1000000) + 9000000;\r",
									" // Define a variável de ambiente 'nonexistentId'\r",
									"pm.environment.set(\"nonexistentId\", nonexistentId);\r",
									"\r",
									"\r",
									"\r",
									" \r",
									"const postRequest = {\r",
									"    url: pm.environment.get(\"host\") + \"/login\",\r",
									"    method: \"POST\",\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        options: {\r",
									"            raw: {\r",
									"                language: \"json\"\r",
									"            }\r",
									"        },\r",
									"        raw: JSON.stringify({\r",
									"            email: \"Coleman.Renner@yahoo.com\",\r",
									"            password: \"fKPseV0sfiXqmOUz\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, function (err, res) {\r",
									"    let responseJson = res.json()\r",
									"    let auth = responseJson[\"authorization\"].split(\" \")\r",
									"    console.log(auth[1])\r",
									"    pm.globals.set(\"token\", auth[1])\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Atualizar um produto com um ID inexistente (deve criar um novo produto)\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"O campo nome não estão vazios e está no formato correto\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    \r",
									"    // Verificar se o campo 'nome' está presente, não está vazio e é uma string\r",
									"    pm.expect(requestBody).to.have.property('nome').that.is.a('string').and.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Field nome is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    \r",
									"    // Verificar se o campo 'nome' está presente, não está vazio e é uma string\r",
									"    pm.expect(requestBody).to.have.property('nome').that.is.a('string').and.is.not.empty;\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Field preco is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    \r",
									"    // Verificar se o campo 'preco' está presente, não está vazio e é um número\r",
									"    pm.expect(requestBody).to.have.property('preco').that.is.a('number').and.is.not.null;\r",
									" \r",
									"});\r",
									"pm.test(\"Field descricao is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"    // Verificar se o campo 'descricao' está presente, não está vazio e é uma string\r",
									"    pm.expect(requestBody).to.have.property('descricao').that.is.a('string').and.is.not.empty;\r",
									"\r",
									"});\r",
									"pm.test(\"Field quantidade is not empty and is in the correct format.\", function () {\r",
									"    var requestBody = pm.request.body.raw;\r",
									"    requestBody = JSON.parse(requestBody);\r",
									"   // Verificar se o campo 'quantidade' está presente, não está vazio e é um número\r",
									"    pm.expect(requestBody).to.have.property('quantidade').that.is.a('number').and.is.not.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFirstName}}\",\r\n    \"preco\": {{$randomInt}},\r\n    \"descricao\": \"{{$randomFullName}}\",\r\n    \"quantidade\": {{$randomInt}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos/{{nonexistentId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"{{nonexistentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "editar produto sem token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar se o código de resposta é 401 Unauthorized\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Extrair o JSON da resposta\r",
									"let resJson = pm.response.json();\r",
									"\r",
									"// Verificar se a mensagem de erro está presente e correta\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    pm.expect(resJson.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{$randomFirstName}}\",\r\n    \"preco\": \"{{$randomInt}}\",\r\n    \"descricao\": \"{{$randomFullName}}\",\r\n    \"quantidade\": \"{{$randomInt}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos/3BmrDaGL5UBv",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"3BmrDaGL5UBv"
							]
						}
					},
					"response": []
				},
				{
					"name": "excluir produto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Product deleted successfully\", function(){\r",
									"    let responseJson = pm.response.json()\r",
									"    pm.expect(responseJson.message).to.eql(\"Registro excluído com sucesso\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									" \r",
									"const postRequest = {\r",
									"    url: pm.environment.get(\"host\") + \"/login\",\r",
									"    method: \"POST\",\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        options: {\r",
									"            raw: {\r",
									"                language: \"json\"\r",
									"            }\r",
									"        },\r",
									"        raw: JSON.stringify({\r",
									"            email: \"Coleman.Renner@yahoo.com\",\r",
									"            password: \"fKPseV0sfiXqmOUz\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, function (err, res) {\r",
									"    let responseJson = res.json()\r",
									"    let auth = responseJson[\"authorization\"].split(\" \")\r",
									"    console.log(auth[1])\r",
									"    pm.globals.set(\"token\", auth[1])\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/produtos/{{newProductId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"{{newProductId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "excluir produto que está no carrinho",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Não é permitido excluir produto que faz parte de um carrinho\", function () {\r",
									"    var responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.be.an('object').that.has.property('message', 'Não é permitido excluir produto que faz parte de carrinho');\r",
									"    pm.expect(responseBody).to.have.property('idCarrinhos');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									" \r",
									"const postRequest = {\r",
									"    url: pm.environment.get(\"host\") + \"/login\",\r",
									"    method: \"POST\",\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        options: {\r",
									"            raw: {\r",
									"                language: \"json\"\r",
									"            }\r",
									"        },\r",
									"        raw: JSON.stringify({\r",
									"            email: \"Coleman.Renner@yahoo.com\",\r",
									"            password: \"fKPseV0sfiXqmOUz\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, function (err, res) {\r",
									"    let responseJson = res.json()\r",
									"    let auth = responseJson[\"authorization\"].split(\" \")\r",
									"    console.log(auth[1])\r",
									"    pm.globals.set(\"token\", auth[1])\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/produtos/K6leHdftCeOJj8BJ",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"K6leHdftCeOJj8BJ"
							]
						}
					},
					"response": []
				},
				{
					"name": "excluir produto com id inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Não foi possível excluir um produto com id inexistente\", function () {\r",
									"    var responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.property('message', 'Nenhum registro excluído');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera um ID aleatório alto que provavelmente não existe\r",
									"var nonexistentId = Math.floor(Math.random() * 1000000) + 9000000;\r",
									" // Define a variável de ambiente 'nonexistentId'\r",
									"pm.environment.set(\"nonexistentId\", nonexistentId);\r",
									"\r",
									"\r",
									"\r",
									" \r",
									"const postRequest = {\r",
									"    url: pm.environment.get(\"host\") + \"/login\",\r",
									"    method: \"POST\",\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        options: {\r",
									"            raw: {\r",
									"                language: \"json\"\r",
									"            }\r",
									"        },\r",
									"        raw: JSON.stringify({\r",
									"            email: \"Coleman.Renner@yahoo.com\",\r",
									"            password: \"fKPseV0sfiXqmOUz\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, function (err, res) {\r",
									"    let responseJson = res.json()\r",
									"    let auth = responseJson[\"authorization\"].split(\" \")\r",
									"    console.log(auth[1])\r",
									"    pm.globals.set(\"token\", auth[1])\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/produtos/{{nonexistentId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"{{nonexistentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "excluir produto sem autorização",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"let resJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    pm.expect(resJson.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									" \r",
									"const postRequest = {\r",
									"    url: pm.environment.get(\"host\") + \"/login\",\r",
									"    method: \"POST\",\r",
									"    body: {\r",
									"        mode: \"raw\", \r",
									"        options: {\r",
									"            raw: {\r",
									"                language: \"json\"\r",
									"            }\r",
									"        },\r",
									"        raw: JSON.stringify({\r",
									"            email: \"Coleman.Renner@yahoo.com\",\r",
									"            password: \"fKPseV0sfiXqmOUz\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, function (err, res) {\r",
									"    let responseJson = res.json()\r",
									"    let auth = responseJson[\"authorization\"].split(\" \")\r",
									"    console.log(auth[1])\r",
									"    pm.globals.set(\"token\", auth[1])\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/produtos/{{newProductId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"{{newProductId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "carrinhos",
			"item": [
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/carrinhos",
							"host": [
								"{{host}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "userEmail",
			"value": ""
		}
	]
}